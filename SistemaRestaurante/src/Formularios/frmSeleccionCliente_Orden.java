/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Formularios;

import bd.ConexionBase;
import java.util.ArrayList;
import sun.security.util.PropertyExpander;
import Objetos.Cliente;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import Funciones.*;

/**
 *
 * @author Julian
 */
public class frmSeleccionCliente_Orden extends javax.swing.JFrame {

    /**
     * Creates new form frmMantenimientoClientes
     */
    public frmSeleccionCliente_Orden() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cbTipoConsulta = new javax.swing.JComboBox<>();
        tfdescripcion = new javax.swing.JTextField();
        btConsultar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaClientes = new javax.swing.JTable();
        btSeleccionar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Seleccion de Cliente");

        cbTipoConsulta.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Todos", "Cedula", "Nombres", "Apellidos" }));

        tfdescripcion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfdescripcionActionPerformed(evt);
            }
        });

        btConsultar.setText("Consultar");
        btConsultar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btConsultarActionPerformed(evt);
            }
        });

        tablaClientes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Id", "Cedula", "Nombres", "Apellidos", "Direccion", "Telefono", "Correo", "Edad", "Fecha Nacimiento", "Tipo"
            }
        ));
        jScrollPane1.setViewportView(tablaClientes);

        btSeleccionar.setText("Editar");
        btSeleccionar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btSeleccionarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(30, 265, Short.MAX_VALUE)
                .addComponent(btSeleccionar, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(293, 293, 293))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 87, Short.MAX_VALUE)
                        .addComponent(cbTipoConsulta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(26, 26, 26)
                        .addComponent(tfdescripcion, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(37, 37, 37)
                        .addComponent(btConsultar)
                        .addGap(106, 106, 106))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbTipoConsulta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tfdescripcion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btConsultar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 21, Short.MAX_VALUE)
                .addComponent(btSeleccionar)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tfdescripcionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfdescripcionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tfdescripcionActionPerformed

    private void btConsultarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btConsultarActionPerformed
        // TODO add your handling code here:
        if(formularioConsultaValidoA()){
            consultarRegistro();}
    }//GEN-LAST:event_btConsultarActionPerformed

    private void btSeleccionarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btSeleccionarActionPerformed
        // TODO add your handling code here:
        if (seleccionValida()){
            int fila = tablaClientes.getSelectedRow();
            String cedula = tablaClientes.getValueAt(fila,1).toString();
            //frmGenerarOrden 
        }
        
        /*
        if (seleccionEdicionValida()){
            int fila = tablaClientes.getSelectedRow();
            String id = tablaClientes.getValueAt(fila,0).toString();
            String cedula = tablaClientes.getValueAt(fila,1).toString();
            ArrayList<Cliente> cli = new ArrayList<>();
            ConexionBase c = new ConexionBase();

            try{
                c.conectar();
                cli = c.consultarClientes("","cedula");
            }catch (Exception e){
                System.out.println("Error al iniciar edicion de cliente");
            }
            c.desconectar();

            if (Validaciones.validarDupCliCedula(cli, cedula)){
                frmEdicionClientes cliedit = new frmEdicionClientes(id,cedula,this);
                cliedit.setVisible(true);
            }else{
                JOptionPane.showMessageDialog(this,"El cliente seleccionado no existe","Edici√≥n",JOptionPane.ERROR_MESSAGE);
                System.out.println("El cliente no existe");
            }
        }
        */
    }//GEN-LAST:event_btSeleccionarActionPerformed

    /**
     * @param args the command line arguments
     */
    
    public void consultarRegistro(){
        String tipo = cbTipoConsulta.getSelectedItem().toString();
        String descripcion = tfdescripcion.getText();
        
        //consultar
        try{
            //cunsolta a la base
            try{
                ConexionBase c = new ConexionBase();
                c.conectar();
                
                ArrayList<Cliente> registro = c.consultarClientes("","cliente");
                ArrayList<Cliente> resultado = new ArrayList<Cliente>();
                
                if (tipo.equals("Todos")){
                    resultado = registro;
                }else{
                    for (Cliente c1:registro){
                        if(tipo.equals("Cedula")){
                            if(c1.getCedula().contains(descripcion)){
                                resultado.add(c1);
                            }
                        }else if(tipo.equals("Nombres")){
                            if(c1.getNombres().toUpperCase().contains(descripcion.toUpperCase())){
                                resultado.add(c1);
                            }
                        }else if(tipo.equals("Apellidos")){
                            if(c1.getApellidos().toUpperCase().contains(descripcion.toUpperCase())){
                                resultado.add(c1);
                            }
                        }
                    }
                    //System.out.println("consulta invalida...");
                }
                DefaultTableModel dtm = (DefaultTableModel)tablaClientes.getModel();
                dtm.setRowCount(0);
                
                //recorriendo base de datos
                for (Cliente cli:resultado){
                    Object[] fila = new Object[10];
                    fila[0] = cli.getId();
                    fila[1] = cli.getCedula();
                    fila[2] = cli.getNombres();
                    fila[3] = cli.getApellidos();
                    fila[4] = cli.getDireccion();
                    fila[5] = cli.getTelefono();
                    fila[6] = cli.getCorreo();
                    fila[7] = cli.getEdad();
                    fila[8] = cli.getFecha_nacimiento();
                    fila[9] = cli.getTipo();
                    dtm.addRow(fila);
                }
            c.desconectar();
            }catch (Exception e){
                System.out.println("error al consultar clientes");
            }
        }catch (Exception e){
            JOptionPane.showMessageDialog(this,"Ocurri√≥ un error al consultar los registros","Consulta",JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private boolean seleccionValida(){
        int n = tablaClientes.getSelectedRowCount();
        if(n!=1){
            JOptionPane.showMessageDialog(this,
                    "Debe seleccionar un registro para Seleccionar",
                    "Seleccion Clientes",
                    JOptionPane.ERROR_MESSAGE);
            return false;
        }
        return true;
    
    }
    
    private boolean formularioConsultaValidoA(){
        String tipo = cbTipoConsulta.getSelectedItem().toString();
        String descripcion = tfdescripcion.getText();
        /*
        if(!tipo.equals("Todo") && descripcion.equals("")){
            JOptionPane.showMessageDialog(this,
                    "Debe ingresar una descripci√≥n",
                    "Consulta",
                    JOptionPane.ERROR_MESSAGE);
            return false;
        }*/
        if(tipo.equals("Cedula")){
            try{
                tfdescripcion.equals("");
            }catch(Exception e){
                JOptionPane.showMessageDialog(this,
                    "Debe ingresar un n√∫mero",
                    "Consulta",
                    JOptionPane.ERROR_MESSAGE);
                return false;
            }        
        }
        if(tipo.equals("Nombres")){
            try{
                tfdescripcion.equals("");
            }catch(Exception e){
                JOptionPane.showMessageDialog(this,
                    "Debe ingresar un n√∫mero",
                    "Consulta",
                    JOptionPane.ERROR_MESSAGE);
                return false;
            }        
        }
        if(tipo.equals("Apellidos")){
            try{
                tfdescripcion.equals("");
            }catch(Exception e){
                JOptionPane.showMessageDialog(this,
                    "Debe ingresar un n√∫mero",
                    "Consulta",
                    JOptionPane.ERROR_MESSAGE);
                return false;
            }        
        }
        return true;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btConsultar;
    private javax.swing.JButton btSeleccionar;
    private javax.swing.JComboBox<String> cbTipoConsulta;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tablaClientes;
    private javax.swing.JTextField tfdescripcion;
    // End of variables declaration//GEN-END:variables
}
